-- ===========================================================================
-- |   XSEC - PRENOTOWN - Bookable towns in Joomla! 1.5 - Database Schema    |
-- ===========================================================================

-- ------------------------------------------------------------
-- Table used by prenotown to store its preferences
-- ------------------------------------------------------------

CREATE TABLE IF NOT EXISTS `#__prenotown_preferences` (
  `preference` varchar(255) NOT NULL,
  `value` varchar(255) NOT NULL,
  PRIMARY KEY(preference)
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`s;

-- ------------------------------------------------------------
-- This is Joomla base user table. It is reproduced here just
-- to let the database schema be complete. It should be deleted
-- from an SQL creation script before executing it on server.
-- In any case that declaration should not be risky because
-- of the IF NOT EXISTS clause in it.
-- ------------------------------------------------------------

CREATE TABLE IF NOT EXISTS `#__users` (
  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NULL,
  `username` VARCHAR(255) NOT NULL,
  `email` VARCHAR(255) NULL,
  `password_2` VARCHAR(255) NULL,
  `usertype` VARCHAR(255) NULL,
  `block` INTEGER UNSIGNED NULL,
  `sendEmail` INTEGER UNSIGNED NULL,
  `gid` INTEGER UNSIGNED NULL,
  `registerDate` DATETIME NULL,
  `lastvisitDate` DATETIME NULL,
  `activation` VARCHAR(255) NULL,
  `params` TEXT NULL,
  PRIMARY KEY(`id`)
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- ------------------------------------------------------------
-- This table complements the Joomla standard user table
-- allowing more informations to be stored inside the database.
-- It is connected with a 1:1 foreign key to #__users table.
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_user_complement;
CREATE TABLE IF NOT EXISTS `#__prenotown_user_complement` (
  `id` INTEGER UNSIGNED NOT NULL,
  `status` ENUM('user', 'operator', 'admin', 'superadmin') NOT NULL DEFAULT 'user',
  `social_security_number` VARCHAR(16) NOT NULL,
  `address` VARCHAR(255) NULL,
  `town` VARCHAR(255) NULL,
  `district` VARCHAR(255) NULL,
  `nationality` VARCHAR(255) NULL,
  `ZIP` INTEGER(5) UNSIGNED NULL,
  `session_id` CHAR(40),
  PRIMARY KEY(id),
  UNIQUE KEY(`social_security_number`),
  INDEX #__prenotown_user_complement_idx_01(id) /*, -- disabilitata per poter creare la tabella
  FOREIGN KEY(id)
    REFERENCES #__users(id)
      ON DELETE CASCADE
      ON UPDATE CASCADE */
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- grant superadmin privileges to Joomla! admin account
INSERT INTO `#__prenotown_user_complement` (`id`, `status`) VALUES ('62', 'superadmin');

-- ------------------------------------------------------------
-- Groups users with a common name. Each group can be associated
-- to a cost profile for each resource, and have special
-- privileges.
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_user_groups;
CREATE TABLE IF NOT EXISTS `#__prenotown_user_groups` (
  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  PRIMARY KEY(id),
  INDEX #__prenotown_user_groups_idx_01(`id`)
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- default (and undeletable) group
INSERT INTO `#__prenotown_user_groups` VALUES (1, 'All');

-- ------------------------------------------------------------
-- Associate users and groups
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_user_group_entries;
CREATE TABLE IF NOT EXISTS `#__prenotown_user_group_entries` (
  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  `group_id` INTEGER UNSIGNED NOT NULL,
  `user_id` INTEGER UNSIGNED NOT NULL,
  PRIMARY KEY(id),
  UNIQUE KEY(group_id, user_id),
  INDEX #__prenotown_user_group_entries_idx_01(`id`),
  INDEX #__prenotown_user_group_entries_idx_02(`group_id`),
  INDEX #__prenotown_user_group_entries_idx_03(`user_id`),
  FOREIGN KEY(`group_id`)
    REFERENCES #__prenotown_user_groups(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE,
  FOREIGN KEY(user_id)
    REFERENCES #__prenotown_user_complement(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- ------------------------------------------------------------
-- Each cost function is registered here with a name and a PHP
-- class name.
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_cost_function;
CREATE TABLE IF NOT EXISTS `#__prenotown_cost_function` (
  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `class` VARCHAR(255) NOT NULL,
  PRIMARY KEY(`id`),
  UNIQUE KEY(`name`),
  UNIQUE KEY(`class`),
  INDEX #__prenotown_cost_function_idx_01(`id`)
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- register the time cost function provided with default package
INSERT INTO `#__prenotown_cost_function` (`name`, `class`) VALUES ("Time cost function", "PrenotownTimeCostFunction");

-- ------------------------------------------------------------
-- com_prenotown central resource table. Each resource has a
-- row here inside. This table is referenced with foreign keys
-- by multiple tables. Each resource has a cost function
-- profile connected.
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_resource;
CREATE TABLE IF NOT EXISTS `#__prenotown_resource` (
  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  `admin_id` INTEGER UNSIGNED NOT NULL,
  `cost_function_id` INTEGER UNSIGNED NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `address` VARCHAR(255) NOT NULL,
  `notes` TEXT NULL,
  `deadline` INTEGER UNSIGNED NOT NULL,
  `max_advance` INTEGER UNSIGNED NOT NULL,
  `paying_period` INTEGER UNSIGNED NOT NULL,
  `approval_period` INTEGER UNSIGNED NOT NULL,
  `description` TEXT NULL,
  `enabled` BOOLEAN NOT NULL DEFAULT FALSE,
  `availability_enabled` BOOLEAN NOT NULL DEFAULT FALSE,
  `monday_begin` TIME NOT NULL,
  `monday_end` TIME NOT NULL,
  `tuesday_begin` TIME NOT NULL,
  `tuesday_end` TIME NOT NULL,
  `wednesday_begin` TIME NOT NULL,
  `wednesday_end` TIME NOT NULL,
  `thursday_begin` TIME NOT NULL,
  `thursday_end` TIME NOT NULL,
  `friday_begin` TIME NOT NULL,
  `friday_end` TIME NOT NULL,
  `saturday_begin` TIME NOT NULL,
  `saturday_end` TIME NOT NULL,
  `sunday_begin` TIME NOT NULL,
  `sunday_end` TIME NOT NULL,
  PRIMARY KEY(`id`),
  INDEX #__prenotown_resource_idx_01(`id`),
  INDEX #__prenotown_resource_idx_02(`admin_id`),
  INDEX #__prenotown_resource_idx_03(`cost_function_id`),
  FOREIGN KEY(`admin_id`)
    REFERENCES #__prenotown_user_complement(`id`)
      ON DELETE NO ACTION
      ON UPDATE CASCADE,
  FOREIGN KEY(`cost_function_id`)
    REFERENCES #__prenotown_cost_function(`id`)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- ------------------------------------------------------------
-- Each cost function has a profile which is formed by a
-- measure unit base (seconds, minutes, hours and so on) and
-- a value (or multiplier). Together those values form the
-- minimal booking unit.
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_time_cost_function_profile;
CREATE TABLE IF NOT EXISTS `#__prenotown_time_cost_function_profile` (
  `id` INTEGER UNSIGNED UNIQUE NOT NULL,
  `measure_unit_value` INTEGER UNSIGNED NOT NULL DEFAULT 1,
  `measure_unit_base` ENUM('seconds','minutes','hours','days','weeks') NOT NULL DEFAULT 'minutes',
  INDEX #__prenotown_time_cost_function_idx_01(`id`),
  FOREIGN KEY(`id`)
    REFERENCES #__prenotown_resource(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- ------------------------------------------------------------
-- Cost function profiles are organized in fees. Each fee can
-- be applied to one or more groups (even to no groups, being
-- unused).
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_time_cost_function_fee;
CREATE TABLE IF NOT EXISTS `#__prenotown_time_cost_function_fee` (
  `id` INTEGER UNSIGNED UNIQUE NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `resource_id` INTEGER UNSIGNED NOT NULL,
  PRIMARY KEY(`id`),
  UNIQUE KEY(`name`, `resource_id`),
  INDEX #__prenotown_time_cost_function_idx_01(`id`),
  INDEX #__prenotown_time_cost_function_idx_02(`name`, `resource_id`),
  INDEX #__prenotown_time_cost_function_idx_03(`resource_id`),
  FOREIGN KEY(`resource_id`)
    REFERENCES #__prenotown_resource(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- ------------------------------------------------------------
-- Associate a fee to a group
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_time_cost_function_fee_groups;
CREATE TABLE IF NOT EXISTS `#__prenotown_time_cost_function_fee_groups` (
  `id` INTEGER UNSIGNED UNIQUE NOT NULL AUTO_INCREMENT,
  `fee_id` INTEGER UNSIGNED NOT NULL,
  `group_id` INTEGER UNSIGNED NOT NULL,
  PRIMARY KEY(`id`),
  UNIQUE KEY(`fee_id`, `group_id`),
  INDEX #__prenotown_time_cost_function_fee_groups_idx_01(`fee_id`),
  INDEX #__prenotown_time_cost_function_fee_groups_idx_02(`fee_id`),
  INDEX #__prenotown_time_cost_function_fee_groups_idx_03(`group_id`),
  FOREIGN KEY(`fee_id`)
    REFERENCES #__prenotown_time_cost_function_fee(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE,
  FOREIGN KEY(`group_id`)
    REFERENCES #__prenotown_user_groups(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- ------------------------------------------------------------
-- Populate a fee with rules.
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_time_cost_function_fee_rules;
CREATE TABLE IF NOT EXISTS `#__prenotown_time_cost_function_fee_rules` (
  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  `fee_id` INTEGER UNSIGNED NOT NULL,
  `upper_limit` TIME NOT NULL,
  `cost` FLOAT NOT NULL,
  PRIMARY KEY(`id`),
  INDEX #__prenotown_time_cost_function_fee_rules_idx_01(`id`),
  INDEX #__prenotown_time_cost_function_fee_rules_idx_02(`fee_id`),
  FOREIGN KEY(`fee_id`)
    REFERENCES #__prenotown_time_cost_function_fee(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

DELIMITER $

-- create a trigger to auto insert base rule for new fees
CREATE TRIGGER `add_fee_base_rule` AFTER INSERT ON `#__prenotown_time_cost_function_fee`
FOR EACH ROW BEGIN
	INSERT INTO `#__prenotown_time_cost_function_fee_rules` (`fee_id`, `upper_limit`, `cost`) VALUES (NEW.id, '1:00:00', 1);
END;
$

-- create a trigger to auto insert Default fee for new resources
CREATE TRIGGER `add_default_fee_to_resource` AFTER INSERT ON `#__prenotown_resource`
FOR EACH ROW BEGIN
	INSERT INTO `#__prenotown_time_cost_function_fee` (`name`, `resource_id`) VALUES ('Default', NEW.id);
END;
$

DELIMITER ;

-- ------------------------------------------------------------
-- Link an user (as admin) to a resource.
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_resource_admin;
CREATE TABLE IF NOT EXISTS `#__prenotown_resource_admin` (
  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  `id_admin` INTEGER UNSIGNED NOT NULL,
  `id_resource` INTEGER UNSIGNED NOT NULL,
  PRIMARY KEY(`id`),
  INDEX #__prenotown_resource_admin_idx_01(`id`),
  INDEX #__prenotown_resource_admin_idx_02(`id_resource`),
  INDEX #__prenotown_resource_admin_idx_03(`id_admin`),
  FOREIGN KEY(`id_resource`)
    REFERENCES #__prenotown_resource(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE,
  FOREIGN KEY(id_admin)
    REFERENCES #__prenotown_user_complement(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- ------------------------------------------------------------
-- Holds resource attachments (images, PDF, DOC, TXT, ...)
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_resource_attachment;
CREATE TABLE IF NOT EXISTS `#__prenotown_resource_attachment` (
  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  `resource_id` INTEGER UNSIGNED NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `filename` VARCHAR(1024) NOT NULL,
  PRIMARY KEY(`id`),
  INDEX #__prenotown_resource_attachment_idx_01(`id`),
  INDEX #__prenotown_resource_attachment_idx_02(`resource_id`),
  FOREIGN KEY(`resource_id`)
    REFERENCES #__prenotown_resource(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- ------------------------------------------------------------
-- Groups resources with a common name. Those groups act as
-- categories and can be searched in the tree view to limit
-- results.
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_resource_groups;
CREATE TABLE IF NOT EXISTS `#__prenotown_resource_groups` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  PRIMARY KEY(`id`),
  UNIQUE KEY(`name`),
  INDEX #__prwnotown_resource_groups_idx_01(`id`)
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- ------------------------------------------------------------
-- Associate resources and groups
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_resource_group_entries;
CREATE TABLE IF NOT EXISTS `#__prenotown_resource_group_entries` (
  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  `resource_id` INTEGER UNSIGNED NOT NULL,
  `group_id` INT NOT NULL,
  PRIMARY KEY(`id`),
  UNIQUE KEY(`resource_id`, `group_id`),
  INDEX #__prenotown_resource_group_entries_idx_01(`id`),
  INDEX #__prenotown_resource_group_entries_idx_02(`resource_id`),
  INDEX #__prenotown_resource_group_entries_idx_03(`group_id`),
  FOREIGN KEY(`group_id`)
    REFERENCES #__prenotown_resource_groups(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE,
  FOREIGN KEY(resource_id)
    REFERENCES #__prenotown_resource(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- ------------------------------------------------------------
-- Each resource can be composed by other resources. The
-- "composing" relation implies that a component resource can
-- be booked when the composed (bigger) resource is already
-- booked. It also implies that a component resource prevents
-- booking of the composed (bigger) resource when booked.
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_resource_components;
CREATE TABLE IF NOT EXISTS `#__prenotown_resource_components` (
  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  `component_resource_id` INTEGER UNSIGNED NOT NULL,
  `composed_resource_id` INTEGER UNSIGNED NOT NULL,
  PRIMARY KEY(`id`),
  UNIQUE KEY(`component_resource_id`, `composed_resource_id`),
  INDEX #__prenotown_resource_components_idx_01(`id`),
  INDEX #__prenotown_resource_components_idx_02(`composed_resource_id`),
  INDEX #__prenotown_resource_components_idx_03(`component_resource_id`),
  FOREIGN KEY(`composed_resource_id`)
    REFERENCES #__prenotown_resource(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE,
  FOREIGN KEY(`component_resource_id`)
    REFERENCES #__prenotown_resource(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- ------------------------------------------------------------
-- Dependencies are similar to composing relation. The main
-- difference is that if a resource depends on another one,
-- and the other one is booked, the depending resource can't
-- be booked. On the other hand, if a depending resource is
-- booked, the main resource can still be booked.
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_dependencies;
CREATE TABLE IF NOT EXISTS `#__prenotown_resource_dependencies` (
  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  `slave_resource_id` INTEGER UNSIGNED NOT NULL,
  `master_resource_id` INTEGER UNSIGNED NOT NULL,
  PRIMARY KEY(`id`),
  UNIQUE KEY(`slave_resource_id`, `master_resource_id`),
  INDEX #__prenotown_resource_dependencies_idx_01(`id`),
  INDEX #__prenotown_resource_dependencies_idx_02(`master_resource_id`),
  INDEX #__prenotown_resource_dependencies_idx_03(`slave_resource_id`),
  FOREIGN KEY(`master_resource_id`)
    REFERENCES #__prenotown_resource(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE,
  FOREIGN KEY(`slave_resource_id`)
    REFERENCES #__prenotown_resource(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- ------------------------------------------------------------
-- Each booking must refer to a payment in this table. A payment
-- can group more than one booking.
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_payments;
CREATE TABLE IF NOT EXISTS `#__prenotown_payments` (
  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` INTEGER UNSIGNED NOT NULL,
  `amount` FLOAT UNSIGNED NOT NULL,
  `method` ENUM('check', 'credit_card') NOT NULL,
  `check_number` VARCHAR(255) NULL,
  `checked_by` INTEGER UNSIGNED DEFAULT NULL,
  date DATETIME NOT NULL,
  PRIMARY KEY(`id`),
  INDEX #__prenotown_payments_idx_01(`id`),
  INDEX #__prenotown_payments_idx_02(`user_id`),
  FOREIGN KEY(`user_id`)
    REFERENCES #__prenotown_user_complement(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- -- the old booking table
-- 
-- -- DROP TABLE IF EXISTS #__prenotown_booking;
-- CREATE TABLE IF NOT EXISTS #__prenotown_booking (
--   id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
--   resource_id INTEGER UNSIGNED NOT NULL,
--   payment_id INTEGER UNSIGNED NOT NULL,
--   user_id INTEGER UNSIGNED NOT NULL,
--   group_id INTEGER UNSIGNED NOT NULL,
--   operator_id INTEGER UNSIGNED,
--   start DATETIME NOT NULL,
--   stop DATETIME NOT NULL,
--   cost INTEGER UNSIGNED NOT NULL DEFAULT FALSE,
--   approved BOOLEAN NOT NULL DEFAULT FALSE,
--   PRIMARY KEY(id),
--   UNIQUE KEY(resource_id, start, stop),
--   INDEX booking_FKIndex1(resource_id),
--   INDEX booking_FKIndex2(user_id),
--   INDEX booking_FKIndex3(payment_id),
--   FOREIGN KEY(resource_id)
--     REFERENCES #__prenotown_resource(id)
--       ON DELETE NO ACTION
--       ON UPDATE NO ACTION,
--   FOREIGN KEY(user_id)
--     REFERENCES #__users(id)
--       ON DELETE NO ACTION
--       ON UPDATE NO ACTION,
--   FOREIGN KEY(payment_id)
--     REFERENCES #__prenotown_payments(id)
--       ON DELETE NO ACTION
--       ON UPDATE NO ACTION
-- );

-- ------------------------------------------------------------
-- Booking is saved into this table.
--
-- Each booking has a set of basic attributes: resource_id,
-- payment_id, user_id, group_id (if booking as a group) and
-- operator_id (if the user is not booking on his own).
--
-- Booking can be of two types. The simplest is the non
-- periodic, where the booking has just a begin and an end
-- as a DATETIME type. Those kind of booking has the
-- periodic field zeroed.
--
-- The other kind is the periodic one. The periodic field
-- is true here (1), the begin and the end fields are used
-- splitted date from time, where the date part describe
-- the begin and end days (like in: from 2005-01-01 up to
-- 2010-12-31). The time part describe the range inside
-- a single day, like in: from 10:00:00 up to 12:30:00.
--
-- Recurring pattern is described by the periodicity
-- field, which is an unsigned integer of 64 bits:
--
-- --------------------------------------------------------------------
-- |    |                      YEAR                           | WEEK  |
-- --------------------------------------------------------------------
--  4321 09876543210987654321098765432109876543210987654321098 7654321
--       6         5         4         3         2         1
--
-- A mask rappresenting Monday, Wednsday and Friday will be
-- 0010101 (or 21 in decimal) being monday the first less
-- significant bit on right.
--
-- Week of the year is planned but not yet implemented.
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_superbooking;
CREATE TABLE IF NOT EXISTS `#__prenotown_superbooking` (
  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  `resource_id` INTEGER UNSIGNED NOT NULL,
  `payment_id` INTEGER UNSIGNED NULL,
  `user_id` INTEGER UNSIGNED NOT NULL,
  `group_id` INTEGER UNSIGNED NULL,
  `operator_id` INTEGER UNSIGNED,
  `periodic` BOOLEAN NOT NULL DEFAULT FALSE,
  `periodicity` INTEGER(64) UNSIGNED NOT NULL DEFAULT 0,
  `begin` DATETIME NOT NULL,
  `end` DATETIME NOT NULL,
  `cost` FLOAT UNSIGNED NOT NULL DEFAULT 0,
  `approved` BOOLEAN NOT NULL DEFAULT FALSE,
  PRIMARY KEY(`id`),
  UNIQUE KEY(`resource_id`, `periodic`, `periodicity`, `begin`, `end`),
  INDEX #__prenotown_booking_idx_01(`id`),
  INDEX #__prenotown_booking_idx_02(`resource_id`),
  INDEX #__prenotown_booking_idx_03(`user_id`),
  INDEX #__prenotown_booking_idx_04(`payment_id`),
  FOREIGN KEY(`resource_id`)
    REFERENCES #__prenotown_resource(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE,
  FOREIGN KEY(`user_id`)
    REFERENCES #__prenotown_user_complement(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE,
  FOREIGN KEY(`payment_id`)
    REFERENCES #__prenotown_payments(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- ------------------------------------------------------------
-- Periodic booking can have exceptions. Each exception is
-- identified by its date and suppress booking only for that
-- date.
-- ------------------------------------------------------------

-- DROP TABLE IF EXISTS #__prenotown_superbooking_exception;
CREATE TABLE IF NOT EXISTS `#__prenotown_superbooking_exception` (
  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  `booking_id` INTEGER UNSIGNED NOT NULL,
  `exception_date` DATE NOT NULL,
  PRIMARY KEY(`id`),
  UNIQUE KEY(`booking_id`, `exception_date`),
  INDEX #__prenotown_booking_exception_idx_01(`id`),
  INDEX #__prenotown_booking_exception_idx_02(`booking_id`),
  FOREIGN KEY(`booking_id`)
    REFERENCES #__prenotown_superbooking(`id`)
      ON DELETE CASCADE
      ON UPDATE CASCADE
) ENGINE=INNODB CHARACTER SET `utf8` COLLATE `utf8_general_ci`;

-- ----------------------------------------------------------------------
-- To ease booking management, several stored functions are provided. The
-- simplest one just return the bitmask describing the range included
-- between two days (#__prenotown_day_bitmask). The second one provides
-- the logic to check if a new booking will overlap one or more existing
-- bookings. This one is called #__prenotown_booking_overlapping and
-- requires the resource_id as first param, and the booking range for
-- the second one.
-- ----------------------------------------------------------------------

DELIMITER $

DROP PROCEDURE IF EXISTS #__prenotown_initenv $
CREATE PROCEDURE #__prenotown_initenv()
BEGIN
	SET @monday    = 1;
	SET @tuesday   = 2;
	SET @wednesday = 4;
	SET @thursday  = 8;
	SET @friday    = 16;
	SET @saturday  = 32;
	SET @sunday    = 64;
END $

DROP FUNCTION IF EXISTS #__prenotown_day_bitmask $
CREATE FUNCTION #__prenotown_day_bitmask(begin_date DATE, end_date DATE)
RETURNS INTEGER(8)
READS SQL DATA
BEGIN
	DECLARE bitmask INTEGER DEFAULT 0;

	DECLARE begin_dow INTEGER DEFAULT 0;
	DECLARE end_dow INTEGER DEFAULT 0;
	DECLARE reverse BOOLEAN DEFAULT FALSE;
	DECLARE date_diff INTEGER DEFAULT 0;

	DECLARE i INTEGER DEFAULT 0;
	DECLARE stopcond INTEGER DEFAULT 0;

	SELECT WEEKDAY(begin_date) INTO begin_dow;
	SELECT WEEKDAY(end_date) INTO end_dow;

	IF end_date < begin_date THEN
		RETURN 0;			-- invalid input condition
	ELSEIF begin_date = end_date THEN
		RETURN POW(2, begin_dow);	-- return the mask corresponding to that day
	ELSEIF DATE_ADD(begin_date, interval 7 day) <= end_date THEN
		RETURN 127;			-- return a full mask corresponding to a whole week
	ELSEIF end_dow > begin_dow THEN
		SET reverse = FALSE;		-- interval is inside one week
		SET i = end_dow;
		SET stopcond = begin_dow;
	ELSE
		SET reverse = TRUE;		-- interval spans at least across two weeks
		SET i = begin_dow;
		SET stopcond = end_dow;
	END IF;

	WHILE i >= stopcond DO
		SET bitmask = bitmask + POW(2,i);
		SET i = i - 1;
	END WHILE;

	IF reverse = TRUE THEN
		SET bitmask = bitmask ^ 127 + POW(2, end_dow) + POW(2, begin_dow);
	END IF;

	RETURN bitmask;
END $

-- ------------------------------------------------------------
-- return TRUE if a given range between begin_date and end_date,
-- borders included, overlaps a previous booking (being it both
-- periodic or not periodic) on resource identified by rid
-- ------------------------------------------------------------

-- ------------------------------------------------------------
-- check if a booking on a single day cross availability range
-- ------------------------------------------------------------

DROP FUNCTION IF EXISTS #__prenotown_booking_crosses_availability $
CREATE FUNCTION #__prenotown_booking_crosses_availability(rid INTEGER UNSIGNED, bitmask INTEGER UNSIGNED, begin_time TIME, end_time TIME)
RETURNS INTEGER
READS SQL DATA
BEGIN
	DECLARE avail_enab BOOLEAN DEFAULT FALSE;
	DECLARE day_begin TIME;
	DECLARE day_end TIME;
	DECLARE checkmask INTEGER(8) UNSIGNED DEFAULT 0;
	DECLARE result TINYINT SIGNED DEFAULT 0;

	CALL #__prenotown_initenv();

	-- check if availability is enabled on this resource
	SELECT availability_enabled INTO avail_enab FROM `#__prenotown_resource` WHERE `id` = rid;
	IF NOT avail_enab THEN
		RETURN 0;
	END IF;

	-- check day by day all the week
	IF bitmask & @monday THEN
		SELECT monday_begin INTO day_begin FROM `#__prenotown_resource` WHERE `id` = rid;	
		SELECT monday_end INTO day_end FROM `#__prenotown_resource` WHERE `id` = rid;
		IF (TIME(begin_time) < TIME(day_begin)) || (TIME(end_time) > TIME(day_end)) THEN
			SET checkmask = checkmask | @monday;
		END IF;
	END IF;

	IF bitmask & @tuesday THEN
		SELECT tuesday_begin INTO day_begin FROM `#__prenotown_resource` WHERE `id` = rid;	
		SELECT tuesday_end INTO day_end FROM `#__prenotown_resource` WHERE `id` = rid;
		IF (TIME(begin_time) < TIME(day_begin)) || (TIME(end_time) > TIME(day_end)) THEN
			SET checkmask = checkmask | @tuesday;
		END IF;
	END IF;

	IF bitmask & @wednesday THEN
		SELECT wednesday_begin INTO day_begin FROM `#__prenotown_resource` WHERE `id` = rid;	
		SELECT wednesday_end INTO day_end FROM `#__prenotown_resource` WHERE `id` = rid;
		IF (TIME(begin_time) < TIME(day_begin)) || (TIME(end_time) > TIME(day_end)) THEN
			SET checkmask = checkmask | @wednesday;
		END IF;
	END IF;

	IF bitmask & @thursday THEN
		SELECT thursday_begin INTO day_begin FROM `#__prenotown_resource` WHERE `id` = rid;	
		SELECT thursday_end INTO day_end FROM `#__prenotown_resource` WHERE `id` = rid;
		IF (TIME(begin_time) < TIME(day_begin)) || (TIME(end_time) > TIME(day_end)) THEN
			SET checkmask = checkmask | @thursday;
		END IF;
	END IF;

	IF bitmask & @friday THEN
		SELECT friday_begin INTO day_begin FROM `#__prenotown_resource` WHERE `id` = rid;	
		SELECT friday_end INTO day_end FROM `#__prenotown_resource` WHERE `id` = rid;
		IF (TIME(begin_time) < TIME(day_begin)) || (TIME(end_time) > TIME(day_end)) THEN
			SET checkmask = checkmask | @friday;
		END IF;
	END IF;

	IF bitmask & @saturday THEN
		SELECT saturday_begin INTO day_begin FROM `#__prenotown_resource` WHERE `id` = rid;	
		SELECT saturday_end INTO day_end FROM `#__prenotown_resource` WHERE `id` = rid;
		IF (TIME(begin_time) < TIME(day_begin)) || (TIME(end_time) > TIME(day_end)) THEN
			SET checkmask = checkmask | @saturday;
		END IF;
	END IF;

	IF bitmask & @sunday THEN
		SELECT sunday_begin INTO day_begin FROM `#__prenotown_resource` WHERE `id` = rid;	
		SELECT sunday_end INTO day_end FROM `#__prenotown_resource` WHERE `id` = rid;
		IF (TIME(begin_time) < TIME(day_begin)) || (TIME(end_time) > TIME(day_end)) THEN
			SET checkmask = checkmask | @sunday;
		END IF;
	END IF;

	-- allow negative result of subtractions
	SET SQL_MODE='NO_UNSIGNED_SUBTRACTION';

	RETURN 0 - checkmask;
END $

-- ------------------------------------------------------------
-- check if a time range crosses availability ranges 
-- ------------------------------------------------------------

DROP FUNCTION IF EXISTS #__prenotown_booking_crosses_availability_on_day_range $
CREATE FUNCTION #__prenotown_booking_crosses_availability_on_day_range(rid INTEGER UNSIGNED, begin_day DATE, end_day DATE, begin_time TIME, end_time TIME)
RETURNS INTEGER
READS SQL DATA
BEGIN
	DECLARE result BOOLEAN DEFAULT FALSE;
	DECLARE day_bitmask INTEGER UNSIGNED DEFAULT 0;

	SELECT #__prenotown_day_bitmask(begin_day, end_day) INTO day_bitmask;
	SELECT #__prenotown_booking_crosses_availability(rid, day_bitmask, begin_time, end_time) INTO result;

	RETURN result;
END $

-- ------------------------------------------------------------
-- check if a single booking overlaps another
-- ------------------------------------------------------------

DROP FUNCTION IF EXISTS #__prenotown_single_booking_overlapping $
CREATE FUNCTION #__prenotown_single_booking_overlapping(rid INTEGER UNSIGNED, booking_begin DATETIME, booking_end DATETIME)
RETURNS INTEGER
READS SQL DATA
BEGIN
	DECLARE check_date DATE;
	DECLARE result INTEGER DEFAULT 0;

	SELECT id INTO result FROM #__prenotown_superbooking
	WHERE #__prenotown_superbooking.resource_id = rid
		AND booking_begin <= #__prenotown_superbooking.end
		AND booking_end >= #__prenotown_superbooking.begin
		AND periodic = FALSE
	LIMIT 1;
	
	IF result THEN
		RETURN result;
	END IF;

	SET result = 0;

	-- loop on the overall range for periodic bookings
	SET check_date = date(booking_begin);
	WHILE check_date <= date(booking_end) DO
		SET result = 0;

		-- search for a booking overlapping the given one
		SELECT `#__prenotown_superbooking`.`id`
		INTO result
		FROM `#__prenotown_superbooking`
		WHERE `resource_id` = rid
			AND DATE(booking_begin) <= DATE(#__prenotown_superbooking.end)
			AND DATE(booking_end) >= DATE(#__prenotown_superbooking.begin)
			AND TIME(booking_begin) <= TIME(#__prenotown_superbooking.end)
			AND TIME(booking_end) >= TIME(#__prenotown_superbooking.begin)
			AND `periodic` = TRUE
			AND `periodicity` & #__prenotown_day_bitmask(check_date, check_date)
			AND check_date NOT IN (
				SELECT exception_date
				FROM `#__prenotown_superbooking_exception`
				WHERE booking_id = `#__prenotown_superbooking`.`id`
			)
		LIMIT 1;

		IF result THEN
			RETURN result;
		END IF;

		-- steps check_date to next day
		SET check_date = DATE_ADD(check_date, INTERVAL 1 DAY);
	END WHILE;

	-- check availability range crossing
	SET result = FALSE;
	SET result = #__prenotown_booking_crosses_availability_on_day_range(rid, DATE(booking_begin), DATE(booking_end), TIME(booking_begin), TIME(booking_end));

	RETURN result;
END $

-- ------------------------------------------------------------
-- check if a periodic booking overlaps another
-- ------------------------------------------------------------

DROP FUNCTION IF EXISTS #__prenotown_periodic_booking_overlapping $
CREATE FUNCTION #__prenotown_periodic_booking_overlapping(rid INTEGER UNSIGNED, booking_begin DATETIME, booking_end DATETIME, has_periodicity INTEGER UNSIGNED)
RETURNS INTEGER
READS SQL DATA
BEGIN
	DECLARE check_date DATE;
	DECLARE result INTEGER DEFAULT 0;
	DECLARE bitmask INTEGER DEFAULT 0;
	DECLARE is_periodic INTEGER DEFAULT 0;
	DECLARE begin_date DATE;
	DECLARE end_date DATE;

	-- create temporary table for exception if not already existing
	-- we need two tables because a temporary table can be accessed
	-- only once inside the same query. so next select will fail otherwise.
	CREATE TEMPORARY TABLE IF NOT EXISTS `#__prenotown_exceptions_begin` (exception_date DATE NOT NULL);
	CREATE TEMPORARY TABLE IF NOT EXISTS `#__prenotown_exceptions_end`   (exception_date DATE NOT NULL);

	-- check periodic over single
	SELECT `id` INTO result FROM `#__prenotown_superbooking`
	WHERE `#__prenotown_superbooking`.`resource_id` = rid
		AND `#__prenotown_superbooking`.`periodic` = 0							-- checking on nonperiodic
		AND (has_periodicity & #__prenotown_day_bitmask(DATE(begin), DATE(end)))			-- only on days that match periodicity
		AND DATE(booking_begin) <= DATE(#__prenotown_superbooking.end)					-- only in the same date range
		AND DATE(booking_end) >= DATE(#__prenotown_superbooking.begin)
		AND TIME(booking_begin) <= TIME(#__prenotown_superbooking.end)					-- only in the same time range
		AND TIME(booking_end) >= TIME(#__prenotown_superbooking.begin)
		AND DATE(begin) NOT IN (SELECT exception_date FROM `#__prenotown_exceptions_begin`)		-- no exceptions for begin and end day
		AND DATE(end) NOT IN (SELECT exception_date FROM `#__prenotown_exceptions_end`)			--    (can be done better?)
	LIMIT 1;

	-- add an exception for the overlapping day and return
	-- the application is in charge to call this function again until it returns 0
	IF result THEN
		SELECT DATE(`begin`) INTO begin_date FROM `#__prenotown_superbooking` WHERE `id` = result;
		INSERT INTO `#__prenotown_exceptions_begin` (exception_date) VALUES (begin_date);
		INSERT INTO `#__prenotown_exceptions_end`   (exception_date) VALUES (begin_date);

		SELECT DATE(`end`) INTO end_date FROM #__prenotown_superbooking WHERE id = result;
		INSERT INTO `#__prenotown_exceptions_begin` (exception_date) VALUES (end_date);
		INSERT INTO `#__prenotown_exceptions_end`   (exception_date) VALUES (end_date);

		RETURN result;
	END IF;

	-- check periodic over periodic
	SET result = 0;

	SELECT `#__prenotown_superbooking`.`id`
	INTO result
	FROM `#__prenotown_superbooking`
	WHERE `resource_id` = rid
		AND `#__prenotown_superbooking`.`periodic` = 1
		AND `#__prenotown_superbooking`.`periodicity` & has_periodicity
		AND DATE(booking_begin) <= DATE(#__prenotown_superbooking.end)
		AND DATE(booking_end) >= DATE(#__prenotown_superbooking.begin)
		AND TIME(booking_begin) <= TIME(#__prenotown_superbooking.end)
		AND TIME(booking_end) >= TIME(#__prenotown_superbooking.begin)
	LIMIT 1;

	IF result THEN
		RETURN result;
	END IF;

	-- check availability range crossing
	SET result = FALSE;
	SET bitmask = #__prenotown_day_bitmask(DATE(booking_begin), DATE(booking_end));
	SET result = #__prenotown_booking_crosses_availability(rid, has_periodicity, TIME(booking_begin), TIME(booking_end));

	RETURN result;
END $

-- ------------------------------------------------------------
-- check if a booking overlaps another. this is the forntend
-- to #__prenotown_single_booking_overlapping and
-- #__prenotown_periodic_booking_overlapping functions which
-- should never be called directly.
-- ------------------------------------------------------------

DROP FUNCTION IF EXISTS #__prenotown_booking_overlapping $
CREATE FUNCTION #__prenotown_booking_overlapping(rid INTEGER UNSIGNED, booking_begin DATETIME, booking_end DATETIME, has_periodicity INTEGER)
RETURNS INTEGER
READS SQL DATA
BEGIN
	DECLARE result INTEGER DEFAULT 0;

	-- check input correctness
	IF booking_end < booking_begin THEN RETURN TRUE; END IF;

	IF has_periodicity > 0 THEN
		SELECT #__prenotown_periodic_booking_overlapping(rid, booking_begin, booking_end, has_periodicity) INTO result;
	ELSE
		SELECT #__prenotown_single_booking_overlapping(rid, booking_begin, booking_end) INTO result;
	END IF;

	RETURN result;
END $

-- ------------------------------------------------------------
-- Loop on a date range to retrieve all the booking on a
-- resource.
-- ------------------------------------------------------------

DROP PROCEDURE IF EXISTS #__prenotown_booking_on_day_range $
CREATE PROCEDURE #__prenotown_booking_on_day_range(rid INTEGER UNSIGNED, begin_date DATE, end_date DATE)
BEGIN
	SELECT `id`, `payment_id`, `user_id`,
		DATE(`begin`) AS begin_date,
		TIME(`begin`) AS begin_time,
		HOUR(`begin`) * 60 + minute(`begin`) AS begin,
		DATE(`end`) AS end_date,
		TIME(`end`) AS end_time,
		HOUR(`end`) * 60 + minute(`begin`) AS end,
		periodic
	FROM `#__prenotown_superbooking`
	WHERE `resource_id` = rid
		AND date(end_date) >= date(`begin`)
		AND date(begin_date) <= date(`end`)
		AND (periodic = 0 OR #__prenotown_day_bitmask(begin_date, end_date) & periodicity)
	ORDER BY begin;
END $

-- ------------------------------------------------------------
-- Reports all bookings on a resource on a day.
-- ------------------------------------------------------------

DROP PROCEDURE IF EXISTS #__prenotown_booking_on_day $
CREATE PROCEDURE #__prenotown_booking_on_day(rid INTEGER UNSIGNED, day DATE)
BEGIN
	CALL #__prenotown_booking_on_day_range(rid, day, day);
END $

DELIMITER ;
